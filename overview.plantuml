@startuml Overview

class main {
    import Backend
    import LoginPage
    +Backend.initializeDB()
    +LoginPage.start()
}

entity LoginPage {
    #import Backend
    #import Dashboard
    +start()
    +login()
    +createUser()
}

note right of LoginPage::start
    Start: begins user actions (loops if invalid inputs):
        1. Log in -> calls login()
        2. Create user -> call createUser()
        3. Exit program 
end note

note right of LoginPage::login
    Calls Backend.checkLogin(username, pw)
end note

note right of LoginPage::createUser
    - calls Backend.checkUser(username)
    - calls Backend.createUser(username, pw)
end note

package SQLite <<database>> {  
    entity Backend {
        #import sqlite3
        #import datetime
        -table : users {PK username, pw}
        -table : entries {FK username, date, data}
        +initializeDB()
        +checkLogin(username, pw)
        +checkUser(username)
        +insertUser(username, pw)
        +recentTransactions(username)
        +balance(username)    
        +addTransaction(username, amt, desc)
        +getTransactions(username)
        +printDB()
    }
}

entity Dashboard {
    #Backend : backend
    +start(username)
    +recentTransactions(username)
    +createTransaction(username)
    +viewTransaction(username)
}

note right of Dashboard::start
    Start: begins user actions (loops if invalid inputs):
        1. See all -> Backend.getTransactions()
        2. Create -> Backend.addTransaction()
        3. Exit program 
end note
note right of Dashboard::recentTransactions
    Calls Backend.recentTransactions(username)
    Outputs up to 5 of the last 5 transactions
end note

main -right-> LoginPage : LoginPage.start()
main -down-> Backend : Backend.initializeDB()

LoginPage .left.> main : exit
LoginPage --> Backend : verify/insert user
LoginPage -down-> Dashboard : Dashboard.start(username)

Dashboard ..> LoginPage : exit
Dashboard -left-> Backend : create/view Transactions

Backend ..> LoginPage
Backend .right.> Dashboard 


@enduml