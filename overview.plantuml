@startuml Overview

class main {
    import Backend
    import LoginPage
    +Backend.initializeDB()
    +LoginPage.start()
}

<> diamond
diamond - main::backend
diamond - main::login
note left of diamond
    Method calls
end note

entity LoginPage {
    #import Backend
    #import Dashboard
    +start()
    +login()
    +createUser()
}

note right of LoginPage::start
    Start: begins user actions (loops if invalid inputs):
        1. Log in -> calls login()
        2. Create user -> call createUser()
        3. Exit program 
end note

note right of LoginPage::login
    Calls Backend.checkLogin(username, pw)
end note

note right of LoginPage::createUser
    - calls Backend.checkUser(username)
    - calls Backend.createUser(username, pw)
end note

package SQLite <<database>> {  
    entity Backend {
        #import sqlite3
        #connection : cursor
        -table : users {PK username, pw}
        -table : entries {FK username, date, data}
        +initializeDB()
        +checkLogin(username, pw)
        +checkUser(username)
        +setEntries(username, pw)
    }
}

entity Dashboard {
    #Backend : backend
    #Output : Finances
    +backend.getEntries()
    +backend.inputEntry()
    +while(exit == false){ <user actions> }
    +getEntries()
    +setEntry()
    +exit()
}

note right of Dashboard
    output finances
end note

main -right-> LoginPage : log in
main -> Backend : initialize DB

LoginPage --> Backend : verify/insert user
LoginPage ..> main : exit program
LoginPage --> Dashboard : log in success

Dashboard -right-> Backend : get/add/delete entry

Backend ..> LoginPage
Backend ..> Dashboard 

@enduml